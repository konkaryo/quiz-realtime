//schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum RoomStatus {
  OPEN
  CLOSED
}

enum Theme {
  CINEMA_SERIES
  ARTS_CULTURE
  JEUX_BD
  GEOGRAPHIE
  LANGUES_LITTERATURE
  ECONOMIE_POLITIQUE
  GASTRONOMIE
  CROYANCES
  SPORT
  HISTOIRE
  DIVERS
  SCIENCES_VIE
  SCIENCES_TECHNIQUES
  MUSIQUE
  ACTUALITES_MEDIAS
}

enum RoomVisibility {
  PUBLIC
  PRIVATE
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String
  displayName     String
  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sessions        Session[]
  player          Player?
  ownedRooms      Room[]    @relation("UserOwnedRooms")
  role            Role      @default(USER)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model Player {
  id          String       @id @default(cuid())
  userId      String?      @unique
  user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  name        String
  isBot       Boolean      @default(false)
  bot         Bot?
  createdAt   DateTime     @default(now())
  playerGames PlayerGame[]
}

model Bot {
  id           String     @id @default(cuid())
  name         String     @unique
  speed        Int        @default(50)
  averageSkill Int        @default(50)
  skills       BotSkill[]
  morning      Float      @default(0.1)
  afternoon    Float      @default(0.2)
  evening      Float      @default(0.5)
  night        Float      @default(0.2)
  playerId     String?    @unique
  player       Player?    @relation(fields: [playerId], references: [id])
  createdAt    DateTime   @default(now())
}

model BotSkill {
  botId String
  theme Theme
  value Int
  bot   Bot    @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@id([botId, theme])
}

model Room {
  id            String         @id @default(cuid())
  ownerId       String?
  owner         User?          @relation("UserOwnedRooms", fields: [ownerId], references: [id], onDelete: SetNull)
  difficulty    Int            @default(5)
  popularity    Int            @default(5)
  code          String?        @unique
  createdAt     DateTime       @default(now())
  games         Game[]
  status        RoomStatus     @default(OPEN)
  closedAt      DateTime?
  bannedThemes  Theme[]
  questionCount Int            @default(10)
  roundMs       Int            @default(10000)
  visibility    RoomVisibility @default(PRIVATE)

  @@index([ownerId])
  @@index([status, createdAt])
}

model Game {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  state       String
  room        Room         @relation(fields: [roomId], references: [id])
  roomId      String
  playerGames PlayerGame[]
}

model Question {
  id              String           @id @default(cuid())
  text            String
  choices         Choice[]
  theme           Theme?
  difficulty      String?
  img             String?
  playerGames     PlayerGame[]
  acceptedAnswers AcceptedAnswer[]
  answers         Answer[]
}

model PlayerGame {
  id        String     @id @default(cuid())
  game      Game       @relation(fields: [gameId], references: [id])
  gameId    String
  player    Player     @relation(fields: [playerId], references: [id])
  playerId  String
  questions Question[]
  answers   Answer[]
  score     Int        @default(0)
  energy    Int        @default(10)

  @@unique([gameId, playerId], name: "gameId_playerId")
}

model Choice {
  id         String   @id @default(cuid())
  label      String
  isCorrect  Boolean  @default(false)
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Answer {
  id           String     @id @default(cuid())
  playerGame   PlayerGame @relation(fields: [playerGameId], references: [id])
  playerGameId String
  question     Question?  @relation(fields: [questionId], references: [id])
  questionId   String?
  text         String
  correct      Boolean
  createdAt    DateTime   @default(now())
  responseMs   Int        @default(-1)
}

model AcceptedAnswer {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String
  norm       String

  @@unique([questionId, norm])
}
